# ZCO 项目 Cursor 规则

## 项目概述
这是一个用 Zig 编写的协程库项目，提供类似 Go 语言的 channel 功能和协程调度机制。

## 代码风格和约定

### Zig 0.14.0 协程调度器与channel风格约定
 1. 主协程入口函数签名建议：`pub fn main() !void`
 2. 所有协程函数需带入 `*Schedule` 或相关上下文参数
 3. 协程创建统一使用 `try schedule.go(CoFn, .{args})`
 4. Channel 创建使用 `zco.CreateChan(T)`，需与具体调度器关联
 5. 异步 IO 对象需内含 `schedule: *zco.Schedule` 字段
 6. 全部资源分配必须手动回收 (建议用 defer)
 7. 错误处理加注释，推荐使用 Zig 原生 error 体系
 8. 公共 API 必须提供中文文档注释，复杂逻辑写英文行内注释
 9. 多并发协程和通道时，避免调用阻塞型API
 10. 调度器的 loop 必须在主协程结尾 `try schedule.loop();`


### Zig 代码规范
- 使用 4 个空格缩进，不使用制表符
- 函数名使用 camelCase，类型名使用 PascalCase
- 常量使用 UPPER_SNAKE_CASE
- 变量名使用 snake_case
- 结构体字段使用 snake_case
- 枚举值使用 UPPER_SNAKE_CASE

### 命名约定
- 协程相关：`Co`、`Schedule`、`Chan`
- 异步IO相关：`Tcp`、`File`、`Io`
- 工具函数：`CreateChan`、`CreateIo`
- 状态枚举：`.INITED`、`.RUNNING`、`.SUSPEND`、`.READY`

### 注释规范
- 公共API必须提供中文注释
- 复杂逻辑需要行内注释
- 使用 `///` 进行文档注释
- 使用 `//` 进行行内注释

### 错误处理
- 优先使用 Zig 的错误处理机制
- 协程相关错误使用 `error` 类型
- 网络IO错误需要适当处理
- 内存分配错误必须处理

## 项目结构

### 核心模块
- `src/root.zig` - 主入口和公共API
- `src/co.zig` - 协程实现
- `src/schedule.zig` - 协程调度器
- `src/chan.zig` - 通道实现
- `src/switch_timer.zig` - 时间片切换
- `src/wg.zig` - 等待组

### 子模块
- `io/` - 异步IO模块
- `nets/` - 网络模块
- `file/` - 文件模块

### 依赖
- `libxev` - 异步事件循环库

## 开发指导

### 协程开发
- 协程函数必须接受 `*Schedule` 参数
- 使用 `try co.Sleep()` 进行协程休眠
- 使用 `try co.Suspend()` 主动让出CPU
- 使用 `try co.Resume()` 唤醒其他协程

### 通道开发
- 使用 `zco.CreateChan(DataType)` 创建类型化通道
- 通道必须与特定调度器关联
- 使用 `defer` 确保通道正确关闭和销毁
- 通道关闭后发送/接收会返回错误

### 异步IO开发
- 继承 `io.CreateIo(IOType)` 模式
- 必须包含 `schedule: *zco.Schedule` 和 `xobj: ?xev.File` 字段
- 实现 `read`、`write`、`close` 等标准方法
- 只能在协程环境中使用

### 内存管理
- 使用 `std.heap.GeneralPurposeAllocator` 作为默认分配器
- 协程栈大小通过 `DEFAULT_ZCO_STACK_SZIE` 配置
- 所有分配的资源必须正确释放
- 使用 `defer` 确保资源清理

### 测试规范
- 每个模块都应该有对应的测试
- 测试函数使用 `test "test name"` 格式
- 协程测试使用 `zco.loop` 包装
- 网络测试需要适当的错误处理

## 性能考虑

### 协程性能
- 协程切换使用 ucontext 实现
- 避免频繁的协程创建和销毁
- 合理设置协程栈大小
- 使用时间片调度避免饥饿

### 通道性能
- 通道缓冲区大小影响性能
- 避免在通道中传递大型数据结构
- 及时关闭不再使用的通道

### 异步IO性能
- 使用 libxev 提供高性能异步IO
- 避免阻塞操作
- 合理使用缓冲区大小

## 调试和日志

### 日志级别
- 使用 `std.log.debug` 进行调试输出
- 使用 `std.log.err` 进行错误输出
- 可以通过 `std_options` 控制日志级别

### 调试技巧
- 协程ID用于跟踪协程状态
- 使用 `std.log.debug` 输出协程状态变化
- 网络操作需要详细的错误日志

## 构建和部署

### 构建要求
- Zig 版本：0.14.0
- 需要 libxev 依赖
- 支持多平台构建

### 构建命令
- `zig build` - 构建库和示例
- `zig build run` - 运行示例
- `zig build test` - 运行测试

## 代码审查要点

### 协程安全
- 确保协程状态正确管理
- 避免在协程外调用协程相关函数
- 检查协程生命周期管理

### 内存安全
- 确保所有分配的内存都被释放
- 避免悬空指针和内存泄漏
- 检查缓冲区边界

### 并发安全
- 确保通道操作的原子性
- 避免数据竞争
- 检查调度器的线程安全性

## 常见问题和解决方案

### 协程不执行
- 检查调度器是否正确启动
- 确保协程函数被正确调用
- 检查协程状态转换

### 通道阻塞
- 检查通道是否已关闭
- 确保有对应的发送/接收协程
- 检查通道缓冲区大小

### 异步IO错误
- 检查文件描述符状态
- 确保在协程环境中使用
- 检查网络连接状态

## 贡献指南

### 代码提交
- 保持代码风格一致
- 添加适当的测试
- 更新相关文档
- 确保所有测试通过

### 功能开发
- 遵循现有的架构模式
- 保持API的一致性
- 考虑向后兼容性
- 添加适当的错误处理

### 性能优化
- 进行性能测试
- 避免不必要的内存分配
- 优化热点路径
- 保持代码可读性
