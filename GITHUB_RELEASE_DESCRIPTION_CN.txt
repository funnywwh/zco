ZCO 0.4.0 - 性能优化版本发布

重大性能更新：在调度器效率、内存管理和HTTP处理方面实现了显著改进。

⚡ 主要改进

• 低并发场景性能提升50%（超越Go 14.5%）
• 调度器效率从 O(log n) 优化到 O(1)
• 内存使用减少50%（栈大小：8KB → 4KB）
• 三级池化架构实现高效资源管理

📊 性能基准测试

| 测试场景 | ZCO RPS | 与Go对比 |
|---------|---------|----------|
| 1000请求, 10并发 | 44,308 | 相比Go提升14.5% |
| 1万请求, 100并发 | 44,944 | 性能相当 |
| 5万请求, 500并发 | 43,646 | 性能相当 |
| 10万请求, 1000并发 | 36,938 | 性能相当 |

🔧 主要特性

调度器优化
• 基于ArrayList的调度（O(1)插入）
• 动态批处理（每批次16-128个协程）
• 优化的信号处理，减少系统调用
• 栈大小优化（8KB → 4KB）

内存管理
• 内存池（1000个1KB内存块，快速分配）
• 协程池（500个协程对象复用）
• 连接池（200个TCP连接复用）
• 内存对齐优化，提升缓存性能

网络优化
• TCP_NODELAY 降低延迟
• 连接池实现高效的TCP连接复用
• 优化的io_uring配置

HTTP性能
• SIMD加速字符串匹配（16字节向量化）
• 预编译HTTP响应
• 1000条目响应缓存
• 零拷贝缓冲区机制
• 直接字节比较替代indexOf

系统优化
• 关键路径的分支预测提示
• CPU亲和性接口（简化版）
• NUMA优化接口（简化版）

🎯 对您意味着什么

如果您使用ZCO进行：
• 高吞吐量应用：将看到显著的RPS改进
• 低延迟要求：网络优化减少响应时间
• 内存受限环境：内存占用减少50%
• 并发工作负载：负载下更好的调度器性能

📦 安装

zig build

或者使用标签：

git checkout 0.4.0
zig build

🔄 升级说明

无破坏性更改。这是一个专注于性能的发布，保持了完整的API兼容性。现有应用将无需任何代码更改即可自动获得性能改进。

📝 完整优化列表（18/20项已完成）

✅ ArrayList替代PriorityQueue
✅ 动态批处理
✅ 批量信号屏蔽
✅ 内存池实现
✅ 协程池实现
✅ 栈大小减少
✅ 内存对齐
✅ TCP_NODELAY
✅ 连接池
✅ 直接字节比较
✅ 预编译响应
✅ HTTP响应缓存
✅ 零拷贝缓冲区
✅ SIMD字符串匹配
✅ 分支预测
✅ CPU亲和性接口
✅ NUMA优化接口
✅ 性能监控

🐛 已知问题

• 在极端高并发场景（1000+并发）下性能略低于Go
• NUMA和CPU亲和性优化为简化版本

🔮 下一步计划

• 完整的NUMA支持
• 真正的CPU亲和性绑定
• 更智能的自适应调度算法
• 分布式协程调度

更多详细信息，请查看仓库中的 CHANGELOG_V0.4.0.md。
